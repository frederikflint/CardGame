@page "/gamelobby/{roomid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage


@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="flex flex-col h-full">
    <div class="flex w-full justify-between">
        <div class="flex flex-col">
            <div>
                <p>Welcome to game room: @RoomId</p>
            </div>

            <div class="">
                <p>User: @_username</p>
                @if (_isAdmin)
                {
                    <p>You are admin</p>
                }
            </div>
        </div>
        <div class="flex">
            @if (_isAdmin)
            {
                <Button Class="h-10 self-center">
                    <button @onclick="StartGame" class="w-full h-full text-white">Start Game</button>
                </Button>
            }
            <Button Class="h-10 self-center">
                <button @onclick="LeaveLobby" class="w-full h-full text-white">Leave lobby</button>
            </Button>
        </div>
    </div>

    <div class="flex flex-col">
        <b>Active users:</b>
        <ul>
            @foreach (var user in _users)
            {
                <li>@user</li>
            }
        </ul>
    </div>


    <div class="border border-black rounded flex-grow overflow-scroll flex">
        <ul class="self-end flex flex-grow flex-col" id="messagesList">
            @foreach (var message in _messages)
            {
                <li class="mx-2 mb-2 @(message.User == _username ? "self-end" : "self-start")">@message.User: @message.Text</li>
            }
        </ul>
    </div>
    <input placeholder="Enter message..." class="absolut bottom-0 w-full my-2" id="messageInput" @bind="_messageInput" @bind:event="oninput"/>

    <Button Class="w-full self-end">
        <button class="w-full text-white" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </Button>

</div>

@code {

    [Parameter]
    public string RoomId { get; set; }

    private HubConnection _hubConnection;
    private readonly List<Message> _messages = new List<Message>();
    private List<string> _users = new List<string>();
    private string _username;
    private string _messageInput;
    private bool _isAdmin;

    protected override async Task OnInitializedAsync()
    {
        var query = new Uri(NavigationManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("username", out var u))
        {
            _username = u;
        }
        else
        {
            _username = $"random_user {new Random().Next(10)}";
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5000/lobbyhub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = new Message() {Text = message, User = user};

            _messages.Add(msg);
            StateHasChanged();
        });

        _hubConnection.On<User>("SessionInformation", async user =>
        {
            if (user == null)
            {
                await LeaveLobby();
            }
            _username = user.Username;
            _isAdmin = user.Admin;
            LocalStorage.SetItem("SessionGuid", user.Guid);

            StateHasChanged();
        });

        _hubConnection.On<string>("UserAdded", user =>
        {
            _users.Add(user);

            StateHasChanged();
        });

        _hubConnection.On<string>("UserRemoved", user =>
        {
            _users.Remove(user);

            StateHasChanged();
        });

        _hubConnection.On("GameStarted", () =>
        {
            if (!LocalStorage.ContainKey("SessionGuid"))
            {
                Console.WriteLine("Could not start game withoug Session GUID");
                return;
            }

            NavigationManager.NavigateTo($"games/mousel/{RoomId}");
        });

        await _hubConnection.StartAsync();

        if (LocalStorage.ContainKey("SessionGuid"))
        {
            await _hubConnection.SendAsync("JoinRoomWithGuid", LocalStorage.GetItem<string>("SessionGuid"), RoomId);
        }
        else
        {
            await _hubConnection.SendAsync("JoinRoom", _username, RoomId);
        }
    }

    private void StartGame()
    {
        if (!_isAdmin || !LocalStorage.ContainKey("SessionGuid"))
        {
            Console.WriteLine("Not admin or missing SessionGuid");
            return;
        }

        _hubConnection.SendAsync("StartGame", LocalStorage.GetItem<string>("SessionGuid"), RoomId);
    }

    private async Task LeaveLobby()
    {
        if (LocalStorage.ContainKey("SessionGuid"))
        {
            try
            {
                await _hubConnection.SendAsync("LeaveLobby", LocalStorage.GetItem<string>("SessionGuid"));
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
        LocalStorage.RemoveItem("SessionGuid");
        NavigationManager.NavigateTo($"/");
    }

    void Send()
    {
        _hubConnection.SendAsync("SendMessage", _username, _messageInput, RoomId);

        _messageInput = "";
    }

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }

    public class Message
    {
        public string User { get; set; }
        public string Text { get; set; }
    }

    public class User
    {
        public string Username { get; set; }
        public string Guid { get; set; }
        public bool Admin { get; set; }
    }

}