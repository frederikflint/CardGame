@page "/games/davoserjazz/{roomid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.WebUtilities
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage
@inject Blazored.SessionStorage.ISyncSessionStorageService SessionStorage

@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="flex justify-center items-center">
    <button @onclick="NavigateToIndex">Home</button>
</div>
<div class="flex h-full">
    <div class="flex h-full items-center justify-between self-center mx-auto">
        <div class="flex flex-col h-full justify-center">

            <div class="flex grid grid-cols-7">
                <p class="col-span-7">Score: @_score</p>
                @if (_yourTurn)
                {
                    <p class="col-span-7">It is your turn! Make a move!</p>
                    <p class="col-span-7">Suit to match: @(_suitToMatch == 0 ? "None" : _suitToMatch.ToString())</p>
                }
                @foreach (var card in GetOrderedCards())
                {
                    <button @onclick="() => PlayCard(card)">
                        <div class="flex flex-col justify-between p-2 m-2 hover:bg-blue-400 @(_yourTurn && (_suitToMatch == 0 || card.Suit == _suitToMatch || !_cards.Exists(c => c.Suit == _suitToMatch)) ? "bg-yellow-400" : "")">
                            <img class="w-24" src="@Utility.GetFileName(card)" alt="/cards/cardback.png"/>
                        </div>
                        @* <CardComponent _card="card"></CardComponent> *@
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string RoomId { get; set; }

    private HubConnection _hubConnection;
    private List<CardClass> _cards = new List<CardClass>();
    private Suit _suitToMatch;
    private bool _yourTurn = false;
    private int _score = 0;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://cardgame.frederikflint.com/api/davoserjazzhub"))
            .Build();

        _hubConnection.On<GameUser>("PlayerInformation", (user) =>
        {
            Console.WriteLine($"Handsize: {user.Hand.Count}");

            _cards = user.Hand;
            _yourTurn = user.YourTurn;
            _score = user.Score;

            StateHasChanged();
        });

        _hubConnection.On<RoundInformation>("RoundInformation", (roundInformation) =>
        {
            var myGuid = SessionStorage.GetItem<string>("SessionGuid");
            if (myGuid == roundInformation.ActivePlayerGuid)
            {
                _yourTurn = true;
            }
            else
            {
                _yourTurn = false;
            }

            _suitToMatch = roundInformation.SuitToMatch;

            StateHasChanged();
        });

        await _hubConnection.StartAsync();

        var guid = SessionStorage.GetItem<string>("SessionGuid");
        await _hubConnection.SendAsync("EnterGameAsPlayer", guid, RoomId);
    }

    public async Task PlayCard(CardClass card)
    {
        var guid = SessionStorage.GetItem<string>("SessionGuid");
        await _hubConnection.SendAsync("UserTakeTurn", RoomId, guid, card.Suit, card.Number);
    }

    public async ValueTask DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }

    public List<CardClass> GetOrderedCards()
    {
        return _cards.AsEnumerable()
            .OrderBy(d => d.Number)
            .GroupBy(d => d.Suit).SelectMany(x => x).ToList();
    }

    private void NavigateToIndex()
    {
        NavigationManager.NavigateTo($"");
    }

    

}