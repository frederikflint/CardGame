@page "/"
@using JsonSerializer = System.Text.Json.JsonSerializer
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject Blazored.LocalStorage.ISyncLocalStorageService LocalStorage

<div class="flex flex-col h-full">
    @if (LocalStorage.ContainKey("SessionGuid"))
    {
        <div class="self-center">
            <b>Did you lose connection to a game..?</b>
            <Button>
                <button @onclick="RejoinGameRoom" class="w-full text-white">Rejoin here!</button>
            </Button>
        </div>
    }
    <div class="self-center shadow border border-black rounded p-4 w-full sm:w-2/4 my-auto">
        <p class="text-center font-semibold">Join game room</p>

        <div>
            <b class="">Enter name*: </b>
        </div>
        <div>
            <input class="border border-black rounded w-full" id="username" @bind="_username" @bind:event="oninput"/>
        </div>

        <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 mt-6">
            <div>
                <b class="">Choose game room: </b>
            </div>
            <div>
                @if (_rooms.Count > 0)
                {
                    <select @bind="_selectRoomId" class="w-full">
                        @foreach (var room in _rooms)
                        {
                            <option value=@room>@room</option>
                        }
                    </select>
                }
                else
                {
                    <p>No game rooms active</p>
                }
            </div>
        </div>

        <div class="my-2">
            <button disabled="@JoinRoomInfoMissing()" class="text-white border border-black rounded p-2 w-full @(JoinRoomInfoMissing() ? "bg-gray-400" : "bg-blue-400 hover:bg-blue-600")" @onclick="JoinGameRoom">
                Join Game
            </button>
        </div>


        <p class="my-2">
            Or..
        </p>
        <div class="grid grid-cols-1 sm:grid-cols-2 gap-2 mt-6">
            <div>
                <b class="">New game room id: </b>
            </div>
            <div>
                <input class="border border-black rounded w-full my-2" id="game_id" @bind="_newRoomId" @bind:event="oninput"/>
            </div>
        </div>

        <div>
            <button disabled="@(CreateRoomInfoMissing())" class="text-white border border-black rounded p-2 w-full @(CreateRoomInfoMissing() ? "bg-gray-400" : "bg-blue-400 hover:bg-blue-600")" @onclick="CreateNewGameRoom">
                Create new game
            </button>
        </div>
    </div>
</div>

@code {
    private HubConnection _hubConnection;
    private string _selectRoomId = "";
    private string _newRoomId = "";
    private string _username = "";
    private bool _userCreatedRoom = false;
    private List<string> _rooms = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync("http://localhost:5000/room");
        response.EnsureSuccessStatusCode();

        var responseBody = await response.Content.ReadAsStringAsync();
        Console.WriteLine(responseBody);
        _rooms = JsonSerializer.Deserialize<List<string>>(responseBody);

        _selectRoomId = _rooms.FirstOrDefault();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("http://localhost:5000/indexhub"))
            .Build();

        _hubConnection.On<string>("RoomUpdated", (roomId) =>
        {
            Console.Write(roomId);

            _rooms.Add(roomId);

            if (_rooms.Count == 1)
            {
                _selectRoomId = roomId;
            }
            
            StateHasChanged();

            if (!_userCreatedRoom)
            {
                return;
            }

            _selectRoomId = roomId;
            JoinGameRoom();
        });

        await _hubConnection.StartAsync();
    }

    private async Task CreateNewGameRoom()
    {
        await _hubConnection.SendAsync("CreateRoom", _newRoomId);
        _userCreatedRoom = true;
    }

    private void JoinGameRoom()
    {
        LocalStorage.RemoveItem("SessionGuid");
        NavigationManager.NavigateTo($"gamelobby/{_selectRoomId}?username={_username}");
    }

    private void JoinGameRoomWithGuid()
    {
        NavigationManager.NavigateTo($"gamelobby/{_selectRoomId}");
    }

    private async Task RejoinGameRoom()
    {
        var response = await Http.GetAsync($"http://localhost:5000/room/find?guid={LocalStorage.GetItem<string>("SessionGuid")}");

        try
        {
            response.EnsureSuccessStatusCode();
        }
        catch (Exception e)
        {
            Console.WriteLine("Room did not exist");
            LocalStorage.RemoveItem("SessionGuid");
        }

        var responseBody = await response.Content.ReadAsStringAsync();
        _selectRoomId = responseBody;

        JoinGameRoom();
    }

    private bool JoinRoomInfoMissing()
    {
        return string.IsNullOrEmpty(_selectRoomId) || (_username == "");
    }
    
    private bool CreateRoomInfoMissing()
    {
        return string.IsNullOrEmpty(_newRoomId) || (_username == "");
    }

    public class CreateRoom
    {
        public string RoomId { get; set; }
    }

}